#!/usr/bin/env python3
#
# Copyright 2020 Oxide Computer Company
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.


import argparse
import os
import re
import sys

def main(args):
    parser = argparse.ArgumentParser()

    parser.add_argument('--ninja', metavar = 'PATH', required = True,
            type = argparse.FileType('w'),
            help = 'Path for Ninja dyndeps output')
    parser.add_argument('--object', metavar = 'PATH', required = True,
            help = 'Build-relative path of output object file')
    parser.add_argument('--source', metavar = 'PATH', type = argparse.FileType('r'),
            help = 'Bluespec source file to process')
    parser.add_argument('--bs-prefix', metavar = 'PATH', default = '/opt/bluespec',
            help = 'Prefix for Bluespec toolchain')
    parser.add_argument('map', metavar = 'MOD=PATH', nargs = '*',
            help = 'Build-relative PATH of module MOD (one per known module)')

    args = parser.parse_args(args[1:])

    prelude_modules = set([])

    for entry in os.scandir(args.bs_prefix + '/lib/Libraries'):
        if entry.is_file() and entry.name.endswith('.bo'):
            prelude_modules.add(entry.name[:-3])

    path_map = {}
    for mod, path in (arg.split('=', maxsplit=1) for arg in args.map):
        if mod in path_map:
            assert path == path_map[mod], \
                    "Module %s has conflicting paths!" % mod
        else:
            path_map[mod] = path

    import_re = re.compile(r'^import\s+([A-Za-z0-9_]+)')
    unique_imports = set()
    for line in args.source:
        match = import_re.match(line)
        if match:
            unique_imports.add(match.group(1))

    inputs = []
    for im in unique_imports:
        if im in prelude_modules: continue
        assert im in path_map, "no mapping for import %s" % im
        inputs.append(path_map[im])

    print('# Generated by bluescan', file = args.ninja)
    print('ninja_dyndep_version = 1', file = args.ninja)
    print('build %s: dyndep | %s %s' % (args.object, __file__, ' '.join(inputs)),
            file = args.ninja)



if __name__ == '__main__':
    main(sys.argv)
